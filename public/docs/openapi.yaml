openapi: 3.0.3
info:
    title: OnTheGo2Africa
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://localhost'
paths:
    /api/reservations:
        get:
            summary: 'GET /reservations'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Booking APIs'
            security: []
    '/api/book-tour/{id}':
        post:
            summary: 'POST /book-tour'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                number_of_guests:
                                    type: string
                                    description: ''
                                    example: architecto
                                check_in:
                                    type: string
                                    description: ''
                                    example: eveniet
                                check_out:
                                    type: string
                                    description: ''
                                    example: voluptas
                                cost:
                                    type: string
                                    description: ''
                                    example: repellendus
                                paymentID:
                                    type: string
                                    description: ''
                                    example: aspernatur
                            required:
                                - number_of_guests
                                - check_in
                                - check_out
                                - cost
                                - paymentID
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: doloremque
                required: true
                schema:
                    type: string
    '/api/book-event/{id}':
        post:
            summary: 'POST /book-event'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                number_of_guests:
                                    type: string
                                    description: ''
                                    example: occaecati
                                check_in:
                                    type: string
                                    description: ''
                                    example: mollitia
                                check_out:
                                    type: string
                                    description: ''
                                    example: quos
                                cost:
                                    type: string
                                    description: ''
                                    example: quo
                                paymentID:
                                    type: string
                                    description: ''
                                    example: eum
                            required:
                                - number_of_guests
                                - check_in
                                - check_out
                                - cost
                                - paymentID
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: ducimus
                required: true
                schema:
                    type: string
    '/api/reservations/{id}':
        put:
            summary: 'PUT /reservations/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            security: []
        get:
            summary: 'GET /reservations/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Booking APIs'
            security: []
        delete:
            summary: 'DELETE /reservations'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: ex
                required: true
                schema:
                    type: string
    /sanctum/csrf-cookie:
        get:
            summary: 'Return an empty response simply to trigger the storage of the CSRF cookie in the browser.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Success</title>\n\n    <style>\n@import  url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,500;0,600;0,700;1,600&display=swap');\n*{\n  margin:0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody  { \n    background-color: #ffe9cc;\n  height: 100vh;\n  display: flex;\n  font-size: 14px;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  font-family: 'Poppins', sans-serif;   \n}        \n\n.wrapperAlert {\n  width: 500px;\n  height: 400px;\n  overflow: hidden;\n  border-radius: 12px;\n  border: thin solid #ddd;           \n}\n\n.topHalf {\n  width: 100%;\n  color: white;\n  overflow: hidden;\n  min-height: 250px;\n  position: relative;\n  padding: 40px 0;\n  background: rgb(0,0,0);\n  background: -webkit-linear-gradient(45deg, #009a4e, #49e051);\n}\n\n.topHalf p {\n  margin-bottom: 10px;\n  margin-top: 30px\n}\nsvg {\n  fill: white;\n}\n.topHalf h1 {\n  font-size: 2.25rem;\n  display: block;\n  font-weight: 500;\n  letter-spacing: 0.15rem;\n  text-shadow: 0 2px rgba(128, 128, 128, 0.6);\n}\n        \n/* Original Author of Bubbles Animation -- https://codepen.io/Lewitje/pen/BNNJjo */\n.bg-bubbles{\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;            \n  z-index: 1;\n}\n\nli{\n  position: absolute;\n  list-style: none;\n  display: block;\n  width: 40px;\n  height: 40px;\n  background-color: rgba(255, 255, 255, 0.15);/* fade(green, 75%);*/\n  bottom: -160px;\n\n  -webkit-animation: square 20s infinite;\n  animation:         square 20s infinite;\n\n  -webkit-transition-timing-function: linear;\n  transition-timing-function: linear;\n}\nli:nth-child(1){\n  left: 10%;\n}\t\t\nli:nth-child(2){\n  left: 20%;\n\n  width: 80px;\n  height: 80px;\n\n  animation-delay: 2s;\n  animation-duration: 17s;\n}\t\t\nli:nth-child(3){\n  left: 25%;\n  animation-delay: 4s;\n}\t\t\nli:nth-child(4){\n  left: 40%;\n  width: 60px;\n  height: 60px;\n\n  animation-duration: 22s;\n\n  background-color: rgba(white, 0.3); /* fade(white, 25%); */\n}\t\t\nli:nth-child(5){\n  left: 70%;\n}\t\t\nli:nth-child(6){\n  left: 80%;\n  width: 120px;\n  height: 120px;\n\n  animation-delay: 3s;\n  background-color: rgba(white, 0.2); /* fade(white, 20%); */\n}\t\t\nli:nth-child(7){\n  left: 32%;\n  width: 160px;\n  height: 160px;\n\n  animation-delay: 7s;\n}\t\t\nli:nth-child(8){\n  left: 55%;\n  width: 20px;\n  height: 20px;\n\n  animation-delay: 15s;\n  animation-duration: 40s;\n}\t\t\nli:nth-child(9){\n  left: 25%;\n  width: 10px;\n  height: 10px;\n\n  animation-delay: 2s;\n  animation-duration: 40s;\n  background-color: rgba(white, 0.3); /*fade(white, 30%);*/\n}\t\t\nli:nth-child(10){\n  left: 90%;\n  width: 160px;\n  height: 160px;\n\n  animation-delay: 11s;\n}\n\n@-webkit-keyframes square {\n  0%   { transform: translateY(0); }\n  100% { transform: translateY(-500px) rotate(600deg); }\n}\n@keyframes  square {\n  0%   { transform: translateY(0); }\n  100% { transform: translateY(-500px) rotate(600deg); }\n}\n\n.bottomHalf {\n  align-items: center;\n  padding: 35px;\n}\n.bottomHalf p {\n  font-weight: 500;\n  font-size: 1.05rem;\n  margin-bottom: 20px;\n}\n\nbutton {\n  border: none;\n  color: white;\n  cursor: pointer;\n  border-radius: 5px;            \n  padding: 10px 18px;            \n  background-color: #009a4e;\n  text-shadow: 0 1px rgba(128, 128, 128, 0.75);\n  transition: all 0.3s ease;\n}\nbutton:hover {\n  background-color: #007906;\n}\nbutton a{\n    text-decoration: none;\n    color: white;\n}\n    </style>\n  </head>\n  <body>\n    <div class=\"wrapperAlert\">\n      <div class=\"contentAlert\">\n        <div class=\"topHalf\">\n          <p>\n            <svg viewBox=\"0 0 512 512\" width=\"100\" title=\"check-circle\">\n              <path\n                d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"\n              />\n            </svg>\n          </p>\n          \n\n          <ul class=\"bg-bubbles\">\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n          </ul>\n        </div>\n\n        <div class=\"bottomHalf\">\n          <p>Email Verified Successfully</p>\n\n          <button id=\"alertMO\">\n              <a href=\"https://\">Visit On The go2 Africa</a>\n              \n          </button>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n"
            tags:
                - Endpoints
            security: []
    /api/events:
        get:
            summary: 'GET /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    events: []
                                properties:
                                    events: { type: array, example: [] }
            tags:
                - 'Event APIs'
            security: []
        post:
            summary: 'POST /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: sed
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: aut
                                itenary:
                                    type: string
                                    description: ''
                                    example: et
                                cost:
                                    type: string
                                    description: ''
                                    example: et
                                'images[]':
                                    type: array
                                    description: ''
                                    example: quia
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
    '/api/events/{slug}':
        get:
            summary: 'GET /events/slug'
            description: 'Fetch event with slug'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    event: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] }
                                properties:
                                    event: { type: object, example: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] } }
            tags:
                - 'Event APIs'
            security: []
        parameters:
            -
                in: path
                name: slug
                description: ''
                example: mollitia
                required: true
                schema:
                    type: string
    '/api/events/{id}':
        put:
            summary: 'PUT /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: nam
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: doloremque
                                itenary:
                                    type: string
                                    description: ''
                                    example: reiciendis
                                cost:
                                    type: string
                                    description: ''
                                    example: doloremque
                                'images[]':
                                    type: array
                                    description: ''
                                    example: occaecati
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
        delete:
            summary: 'DELETE /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: qui
                required: true
                schema:
                    type: string
    /api/faqs:
        get:
            summary: 'GET /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    faqs: []
                                properties:
                                    faqs: { type: array, example: [] }
            tags:
                - 'FAQ APIs'
            security: []
        post:
            summary: 'POST /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: aut
                                content:
                                    type: string
                                    description: ''
                                    example: ut
                            required:
                                - title
                                - content
            security: []
    '/api/faqs/{id}':
        get:
            summary: 'GET /faqs/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'FAQ APIs'
            security: []
        put:
            summary: 'PUT /faqs/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: non
                                content:
                                    type: string
                                    description: ''
                                    example: consequatur
                            required:
                                - title
                                - content
            security: []
        delete:
            summary: 'DELETE /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: doloribus
                required: true
                schema:
                    type: string
    /api/newsletter-subscriptions:
        get:
            summary: 'GET /newsletter'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    newsletters: [{ id: 1, email: bralaryea21@gmail.com, created_at: '2023-08-16T23:07:34.000000Z', updated_at: '2023-08-16T23:07:34.000000Z' }]
                                properties:
                                    newsletters: { type: array, example: [{ id: 1, email: bralaryea21@gmail.com, created_at: '2023-08-16T23:07:34.000000Z', updated_at: '2023-08-16T23:07:34.000000Z' }], items: { type: object } }
            tags:
                - 'NewsLetter APIs'
            security: []
    /api/newsletter-subscribe:
        post:
            summary: 'POST /newsletter-subscribe'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'NewsLetter APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: enim
                            required:
                                - email
            security: []
    /api/tours:
        get:
            summary: 'GET /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    tours: []
                                properties:
                                    tours: { type: array, example: [] }
            tags:
                - 'Tour APIs'
            security: []
        post:
            summary: 'POST /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: rerum
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: dignissimos
                                itenary:
                                    type: string
                                    description: ''
                                    example: repellendus
                                cost:
                                    type: string
                                    description: ''
                                    example: repellendus
                                'images[]':
                                    type: array
                                    description: ''
                                    example: nisi
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
        put:
            summary: 'PUT /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: tempora
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: natus
                                itenary:
                                    type: string
                                    description: ''
                                    example: corrupti
                                cost:
                                    type: string
                                    description: ''
                                    example: dolorem
                                'images[]':
                                    type: array
                                    description: ''
                                    example: dolor
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
    '/api/tours/{slug}':
        get:
            summary: 'GET /tours/slug'
            description: 'Fetch tour with slug'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    tour: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] }
                                properties:
                                    tour: { type: object, example: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] } }
            tags:
                - 'Tour APIs'
            security: []
        parameters:
            -
                in: path
                name: slug
                description: ''
                example: quod
                required: true
                schema:
                    type: string
    '/api/tours/{id}':
        delete:
            summary: 'DELETE /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: reprehenderit
                required: true
                schema:
                    type: string
    /api/forgot-password:
        post:
            summary: 'POST /forgot-password'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: enim
                            required:
                                - email
            security: []
    /api/register:
        post:
            summary: 'POST /register'
            description: 'Store a newly created user in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Audra Sporer', username: bode.ward, email: jose12@example.net, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 7 }
                                properties:
                                    data: { type: object, example: { name: 'Audra Sporer', username: bode.ward, email: jose12@example.net, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 7 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: tempora
                                username:
                                    type: string
                                    description: ''
                                    example: laboriosam
                                email:
                                    type: string
                                    description: ''
                                    example: dolorem
                                password:
                                    type: string
                                    description: ''
                                    example: vitae
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: ab
                            required:
                                - name
                                - username
                                - email
                                - password
                                - password_confirmation
            security: []
    /api/login:
        post:
            summary: 'POST /login'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Lavern Schmidt', username: wyatt53, email: pveum@example.net, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 8 }
                                properties:
                                    data: { type: object, example: { name: 'Lavern Schmidt', username: wyatt53, email: pveum@example.net, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 8 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: laborum
                                password:
                                    type: string
                                    description: ''
                                    example: quas
                            required:
                                - email
                                - password
            security: []
    /api/email/verification-notification:
        post:
            summary: 'Send Verify Email Link'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: enim
                            required:
                                - email
            security: []
    '/api/verify-email/{id}/{hash}':
        get:
            summary: 'Verify Email - Backend Only'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    returns: 'success page'
                                properties:
                                    returns: { type: string, example: 'success page' }
            tags:
                - 'User APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: pariatur
                required: true
                schema:
                    type: string
            -
                in: path
                name: hash
                description: ''
                example: ipsam
                required: true
                schema:
                    type: string
    /api/profile:
        get:
            summary: 'GET /profile'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'User APIs'
            security: []
    /api/users:
        put:
            summary: 'PUT /users'
            description: 'Update the user in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Kaitlyn Jakubowski III', username: guillermo.langworth, email: madonna.funk@example.org, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 9 }
                                properties:
                                    data: { type: object, example: { name: 'Kaitlyn Jakubowski III', username: guillermo.langworth, email: madonna.funk@example.org, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 9 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: esse
                                username:
                                    type: string
                                    description: ''
                                    example: ut
                            required:
                                - name
                                - username
            security: []
        get:
            summary: 'GET /users'
            description: 'Get a list of all users'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ name: 'Elian Schmidt', username: dariana.schumm, email: emely.cronin@example.net, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 10 }, { name: 'Kellen Tillman', username: amann, email: morissette.easton@example.org, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 11 }]
                                properties:
                                    data: { type: array, example: [{ name: 'Elian Schmidt', username: dariana.schumm, email: emely.cronin@example.net, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 10 }, { name: 'Kellen Tillman', username: amann, email: morissette.easton@example.org, email_verified_at: '2023-08-16T23:09:55.000000Z', updated_at: '2023-08-16T23:09:55.000000Z', created_at: '2023-08-16T23:09:55.000000Z', id: 11 }], items: { type: object } }
            tags:
                - 'User APIs'
            security: []
    '/api/users/{id}':
        delete:
            summary: 'DELETE /users'
            description: 'Remove the specified resource from storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: dolores
                required: true
                schema:
                    type: string
    /api/logout:
        post:
            summary: 'POST /logout'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            security: []
