openapi: 3.0.3
info:
    title: OnTheGo2Africa
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://localhost'
paths:
    /api/users:
        get:
            summary: 'GET /users'
            description: 'Get a list of all users'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ name: 'Waino Koelpin', username: balistreri.mohammed, email: heller.marguerite@example.org, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 31 }, { name: 'Keanu Kemmer', username: parmstrong, email: dare.nikki@example.com, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 32 }]
                                properties:
                                    data: { type: array, example: [{ name: 'Waino Koelpin', username: balistreri.mohammed, email: heller.marguerite@example.org, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 31 }, { name: 'Keanu Kemmer', username: parmstrong, email: dare.nikki@example.com, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 32 }], items: { type: object } }
            tags:
                - 'Admin APIs'
            security: []
        put:
            summary: 'PUT /users'
            description: 'Update the user in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Enrique Denesik', username: giovani59, email: zreichel@example.org, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 30 }
                                properties:
                                    data: { type: object, example: { name: 'Enrique Denesik', username: giovani59, email: zreichel@example.org, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 30 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: et
                                username:
                                    type: string
                                    description: ''
                                    example: saepe
                            required:
                                - name
                                - username
            security: []
    /api/admins:
        get:
            summary: 'GET /admins'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Admin APIs'
            security: []
        put:
            summary: 'Update the specified resource in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin APIs'
            security: []
        delete:
            summary: 'Remove the specified resource from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin APIs'
            security: []
    '/api/admins/{id}':
        get:
            summary: 'Display the specified resource.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Admin APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: voluptatibus
                required: true
                schema:
                    type: string
    /api/reservations:
        get:
            summary: 'GET /reservations'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Booking APIs'
            security: []
    '/api/book-tour/{id}':
        post:
            summary: 'POST /book-tour'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                number_of_guests:
                                    type: string
                                    description: ''
                                    example: hic
                                check_in:
                                    type: string
                                    description: ''
                                    example: impedit
                                check_out:
                                    type: string
                                    description: ''
                                    example: molestiae
                                cost:
                                    type: string
                                    description: ''
                                    example: autem
                                paymentID:
                                    type: string
                                    description: ''
                                    example: et
                            required:
                                - number_of_guests
                                - check_in
                                - check_out
                                - cost
                                - paymentID
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: ab
                required: true
                schema:
                    type: string
    '/api/book-event/{id}':
        post:
            summary: 'POST /book-event'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                number_of_guests:
                                    type: string
                                    description: ''
                                    example: eligendi
                                check_in:
                                    type: string
                                    description: ''
                                    example: ut
                                check_out:
                                    type: string
                                    description: ''
                                    example: minima
                                cost:
                                    type: string
                                    description: ''
                                    example: dolor
                                paymentID:
                                    type: string
                                    description: ''
                                    example: dolorum
                            required:
                                - number_of_guests
                                - check_in
                                - check_out
                                - cost
                                - paymentID
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: ducimus
                required: true
                schema:
                    type: string
    '/api/reservations/{id}':
        get:
            summary: 'GET /reservations/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Booking APIs'
            security: []
        put:
            summary: 'PUT /reservations/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            security: []
        delete:
            summary: 'DELETE /reservations'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: ea
                required: true
                schema:
                    type: string
    /sanctum/csrf-cookie:
        get:
            summary: 'Return an empty response simply to trigger the storage of the CSRF cookie in the browser.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /:
        get:
            summary: Stale
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    returns: 'success page'
                                properties:
                                    returns: { type: string, example: 'success page' }
            tags:
                - Endpoints
            security: []
    /api/events:
        get:
            summary: 'GET /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    events: []
                                properties:
                                    events: { type: array, example: [] }
            tags:
                - 'Event APIs'
            security: []
        post:
            summary: 'POST /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: in
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: at
                                itenary:
                                    type: string
                                    description: ''
                                    example: perspiciatis
                                cost:
                                    type: string
                                    description: ''
                                    example: tempora
                                'images[]':
                                    type: array
                                    description: ''
                                    example: non
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
    '/api/events/{slug}':
        get:
            summary: 'GET /events/slug'
            description: 'Fetch event with slug'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    event: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] }
                                properties:
                                    event: { type: object, example: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] } }
            tags:
                - 'Event APIs'
            security: []
        parameters:
            -
                in: path
                name: slug
                description: ''
                example: officia
                required: true
                schema:
                    type: string
    '/api/events/{id}':
        put:
            summary: 'PUT /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: ducimus
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: ad
                                itenary:
                                    type: string
                                    description: ''
                                    example: et
                                cost:
                                    type: string
                                    description: ''
                                    example: nihil
                                'images[]':
                                    type: array
                                    description: ''
                                    example: vero
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
        delete:
            summary: 'DELETE /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: recusandae
                required: true
                schema:
                    type: string
    /api/faqs:
        get:
            summary: 'GET /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    faqs: []
                                properties:
                                    faqs: { type: array, example: [] }
            tags:
                - 'FAQ APIs'
            security: []
        post:
            summary: 'POST /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: expedita
                                content:
                                    type: string
                                    description: ''
                                    example: dignissimos
                            required:
                                - title
                                - content
            security: []
    '/api/faqs/{id}':
        get:
            summary: 'GET /faqs/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'FAQ APIs'
            security: []
        put:
            summary: 'PUT /faqs/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: minima
                                content:
                                    type: string
                                    description: ''
                                    example: voluptas
                            required:
                                - title
                                - content
            security: []
        delete:
            summary: 'DELETE /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: dolorem
                required: true
                schema:
                    type: string
    /api/newsletter-subscriptions:
        get:
            summary: 'GET /newsletter'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    newsletters: []
                                properties:
                                    newsletters: { type: array, example: [] }
            tags:
                - 'NewsLetter APIs'
            security: []
    /api/newsletter-subscribe:
        post:
            summary: 'POST /newsletter-subscribe'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'NewsLetter APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: non
                            required:
                                - email
            security: []
    /api/tours:
        get:
            summary: 'GET /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    tours: []
                                properties:
                                    tours: { type: array, example: [] }
            tags:
                - 'Tour APIs'
            security: []
        post:
            summary: 'POST /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: veritatis
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: esse
                                itenary:
                                    type: string
                                    description: ''
                                    example: voluptatem
                                cost:
                                    type: string
                                    description: ''
                                    example: quam
                                'images[]':
                                    type: array
                                    description: ''
                                    example: aspernatur
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
    '/api/tours/{slug}':
        get:
            summary: 'GET /tours/slug'
            description: 'Fetch tour with slug'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    tour: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] }
                                properties:
                                    tour: { type: object, example: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] } }
            tags:
                - 'Tour APIs'
            security: []
        parameters:
            -
                in: path
                name: slug
                description: ''
                example: impedit
                required: true
                schema:
                    type: string
    '/api/tours/{id}':
        put:
            summary: 'PUT /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: et
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: temporibus
                                itenary:
                                    type: string
                                    description: ''
                                    example: ut
                                cost:
                                    type: string
                                    description: ''
                                    example: eveniet
                                'images[]':
                                    type: array
                                    description: ''
                                    example: ratione
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
        delete:
            summary: 'DELETE /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: alias
                required: true
                schema:
                    type: string
    /api/register:
        post:
            summary: 'POST /register'
            description: 'Store a newly created user in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Major Wiza Jr.', username: gmorissette, email: justine14@example.net, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 28 }
                                properties:
                                    data: { type: object, example: { name: 'Major Wiza Jr.', username: gmorissette, email: justine14@example.net, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 28 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: at
                                username:
                                    type: string
                                    description: ''
                                    example: quia
                                email:
                                    type: string
                                    description: ''
                                    example: doloribus
                                password:
                                    type: string
                                    description: ''
                                    example: at
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: vitae
                            required:
                                - name
                                - username
                                - email
                                - password
                                - password_confirmation
            security: []
    /api/forgot-password:
        post:
            summary: 'POST /forgot-password'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: aperiam
                            required:
                                - email
            security: []
    /api/login:
        post:
            summary: 'POST /login'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Beverly Eichmann Jr.', username: dora15, email: ldaniel@example.org, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 29 }
                                properties:
                                    data: { type: object, example: { name: 'Beverly Eichmann Jr.', username: dora15, email: ldaniel@example.org, email_verified_at: '2023-08-17T13:12:12.000000Z', updated_at: '2023-08-17T13:12:12.000000Z', created_at: '2023-08-17T13:12:12.000000Z', id: 29 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: voluptatem
                                password:
                                    type: string
                                    description: ''
                                    example: possimus
                            required:
                                - email
                                - password
            security: []
    /api/email/verification-notification:
        post:
            summary: 'Send Verify Email Link'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: quas
                            required:
                                - email
            security: []
    '/api/verify-email/{id}/{hash}':
        get:
            summary: 'Verify Email - Backend Only'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    returns: 'success page'
                                properties:
                                    returns: { type: string, example: 'success page' }
            tags:
                - 'User APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: in
                required: true
                schema:
                    type: string
            -
                in: path
                name: hash
                description: ''
                example: ullam
                required: true
                schema:
                    type: string
    /api/profile:
        get:
            summary: 'GET /profile'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'User APIs'
            security: []
    '/api/users/{id}':
        delete:
            summary: 'DELETE /users'
            description: 'Remove the specified resource from storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: tenetur
                required: true
                schema:
                    type: string
    /api/logout:
        post:
            summary: 'POST /logout'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            security: []
