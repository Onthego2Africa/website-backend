openapi: 3.0.3
info:
    title: OnTheGo2Africa
    description: ''
    version: 1.0.0
servers:
    -
        url: 'https://onthego2africa.com/api'
paths:
    /api/users:
        get:
            summary: 'GET /users'
            description: 'Get a list of all users'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ name: 'Mrs. Corine Breitenberg', username: julio16, email: torrey06@example.org, email_verified_at: '2023-10-04T10:11:45.000000Z', updated_at: '2023-10-04T10:11:45.000000Z', created_at: '2023-10-04T10:11:45.000000Z', id: 10 }, { name: 'Dr. Jayce Konopelski', username: seffertz, email: agulgowski@example.com, email_verified_at: '2023-10-04T10:11:45.000000Z', updated_at: '2023-10-04T10:11:45.000000Z', created_at: '2023-10-04T10:11:45.000000Z', id: 11 }]
                                properties:
                                    data: { type: array, example: [{ name: 'Mrs. Corine Breitenberg', username: julio16, email: torrey06@example.org, email_verified_at: '2023-10-04T10:11:45.000000Z', updated_at: '2023-10-04T10:11:45.000000Z', created_at: '2023-10-04T10:11:45.000000Z', id: 10 }, { name: 'Dr. Jayce Konopelski', username: seffertz, email: agulgowski@example.com, email_verified_at: '2023-10-04T10:11:45.000000Z', updated_at: '2023-10-04T10:11:45.000000Z', created_at: '2023-10-04T10:11:45.000000Z', id: 11 }], items: { type: object } }
            tags:
                - 'Admin APIs'
            security: []
        put:
            summary: 'PUT /users'
            description: 'Update the user in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Prof. Cecilia Hagenes', username: eduardo.runte, email: mclaughlin.eldred@example.net, email_verified_at: '2023-10-04T10:11:45.000000Z', updated_at: '2023-10-04T10:11:45.000000Z', created_at: '2023-10-04T10:11:45.000000Z', id: 9 }
                                properties:
                                    data: { type: object, example: { name: 'Prof. Cecilia Hagenes', username: eduardo.runte, email: mclaughlin.eldred@example.net, email_verified_at: '2023-10-04T10:11:45.000000Z', updated_at: '2023-10-04T10:11:45.000000Z', created_at: '2023-10-04T10:11:45.000000Z', id: 9 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: dolorem
                                username:
                                    type: string
                                    description: ''
                                    example: eos
                            required:
                                - name
                                - username
            security: []
    /api/admins:
        get:
            summary: 'GET /admins'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Admin APIs'
            security: []
        post:
            summary: 'POST /admins'
            description: 'Store a newly created admin in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: laboriosam
                                username:
                                    type: string
                                    description: ''
                                    example: nam
                                email:
                                    type: string
                                    description: ''
                                    example: ipsum
                                password:
                                    type: string
                                    description: ''
                                    example: suscipit
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: saepe
                            required:
                                - name
                                - username
                                - email
                                - password
                                - password_confirmation
            security: []
        put:
            summary: 'PUT /admins'
            description: 'Update the admin in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: maiores
                                username:
                                    type: string
                                    description: ''
                                    example: ut
                            required:
                                - name
                                - username
            security: []
        delete:
            summary: 'DELETE /admins'
            description: 'Remove the Admin from storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin APIs'
            security: []
    '/api/admins/{id}':
        get:
            summary: 'GET /admin/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Admin APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: sequi
                required: true
                schema:
                    type: string
    '/api/book-event/{id}':
        post:
            summary: 'POST /book-event'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                check_in:
                                    type: string
                                    description: ''
                                    example: id
                                check_out:
                                    type: string
                                    description: ''
                                    example: optio
                                cost:
                                    type: string
                                    description: ''
                                    example: aliquid
                                paymentID:
                                    type: string
                                    description: ''
                                    example: beatae
                                package_id:
                                    type: string
                                    description: ''
                                    example: est
                                plan_name:
                                    type: string
                                    description: ''
                                    example: quia
                                plan_price:
                                    type: string
                                    description: ''
                                    example: suscipit
                                plan_quantity:
                                    type: string
                                    description: ''
                                    example: saepe
                                name:
                                    type: string
                                    description: ''
                                    example: reiciendis
                                email:
                                    type: string
                                    description: ''
                                    example: praesentium
                            required:
                                - cost
                                - package_id
                                - plan_name
                                - plan_price
                                - plan_quantity
                                - name
                                - email
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: velit
                required: true
                schema:
                    type: string
    /api/reservations:
        get:
            summary: 'GET /reservations'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Booking APIs'
            security: []
    '/api/book-tour/{id}':
        post:
            summary: 'POST /book-tour'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                number_of_guests:
                                    type: string
                                    description: ''
                                    example: non
                                check_in:
                                    type: string
                                    description: ''
                                    example: sed
                                check_out:
                                    type: string
                                    description: ''
                                    example: aspernatur
                                cost:
                                    type: string
                                    description: ''
                                    example: sit
                                paymentID:
                                    type: string
                                    description: ''
                                    example: enim
                            required:
                                - number_of_guests
                                - check_in
                                - check_out
                                - cost
                                - paymentID
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: nemo
                required: true
                schema:
                    type: string
    '/api/reservations/{id}':
        get:
            summary: 'GET /reservations/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Booking APIs'
            security: []
        put:
            summary: 'PUT /reservations/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            security: []
        delete:
            summary: 'DELETE /reservations'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: sint
                required: true
                schema:
                    type: string
    '/api/togglepaid/{id}':
        get:
            summary: 'POST /reservations/toggle-paid'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Booking APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: voluptate
                required: true
                schema:
                    type: string
    /sanctum/csrf-cookie:
        get:
            summary: 'Return an empty response simply to trigger the storage of the CSRF cookie in the browser.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /:
        get:
            summary: Stale
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    returns: 'success page'
                                properties:
                                    returns: { type: string, example: 'success page' }
            tags:
                - Endpoints
            security: []
    /api/events:
        get:
            summary: 'GET /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    events: []
                                properties:
                                    events: { type: array, example: [] }
            tags:
                - 'Event APIs'
            security: []
        post:
            summary: 'POST /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: aut
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: qui
                                itenary:
                                    type: string
                                    description: ''
                                    example: eum
                                cost:
                                    type: string
                                    description: ''
                                    example: accusantium
                                'packages[]':
                                    type: array
                                    description: ''
                                    example: illo
                                'images[]':
                                    type: array
                                    description: ''
                                    example: quis
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'packages[]'
                                - 'images[]'
            security: []
    '/api/events/{slug}':
        get:
            summary: 'GET /events/slug'
            description: 'Fetch event with slug'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n\"event\":  {\n     \"id\": 1,\n     \"title\": \"dgs\",\n     \"slug\": \"dgs\",\n     \"cover_image\": \"http:\\/\\/127.0.0.1:8000\\/storage\\/cover_images\\/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg\",\n     \"overview\": \"skflalkjflfkj\",\n     \"itenary\": \"dsfsf\",\n     \"cost\": \"dsf\",\n     \"packages\": \"[\"dsf\",\"sdf\"]\",\n     \"created_at\": \"2023-08-16T14:11:19.000000Z\",\n     \"updated_at\": \"2023-08-16T14:11:19.000000Z\",\n     \"images\": []\n }\n}"
            tags:
                - 'Event APIs'
            security: []
        parameters:
            -
                in: path
                name: slug
                description: ''
                example: id
                required: true
                schema:
                    type: string
    '/api/events/{id}':
        put:
            summary: 'PUT /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: eligendi
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: quia
                                itenary:
                                    type: string
                                    description: ''
                                    example: accusantium
                                cost:
                                    type: string
                                    description: ''
                                    example: officiis
                                'images[]':
                                    type: array
                                    description: ''
                                    example: odio
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
        delete:
            summary: 'DELETE /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: unde
                required: true
                schema:
                    type: string
    /api/packages:
        get:
            summary: 'GET /packages.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    packages: [{ id: 1, title: 'Gye Nyame Package', plan_1_name: Single, image: 'https://onthego2africa.com/api/assets/images/gyenyame.jpg', plan_1_price: '$4,150.00 per person', plan_2_name: Twin, plan_2_price: '$3,685.00 per person', plan_3_name: null, plan_3_price: null, plan_4_name: null, plan_4_price: null, created_at: '2023-09-20T11:28:18.000000Z', updated_at: '2023-09-20T11:28:18.000000Z' }, { id: 2, title: 'Fawohodie Package', plan_1_name: Single, image: 'https://onthego2africa.com/api/assets/images/fawohodie.jpg', plan_1_price: '$3,790.00', plan_2_name: Twin, plan_2_price: '$3,443.00', plan_3_name: null, plan_3_price: null, plan_4_name: null, plan_4_price: null, created_at: '2023-09-20T11:28:18.000000Z', updated_at: '2023-09-20T11:28:18.000000Z' }, { id: 3, title: 'Sankofa Package', plan_1_name: 'Hotel - Single', image: 'https://onthego2africa.com/api/assets/images/sankofa.jpg', plan_1_price: '$3,400.00', plan_2_name: 'Hotel - Twin', plan_2_price: '$2,520.00', plan_3_name: 'Apartment (The Signature) - Single', plan_3_price: '$3,000.00', plan_4_name: 'Apartment (The Signature) - Twin', plan_4_price: '$2,200.00', created_at: '2023-09-20T11:28:18.000000Z', updated_at: '2023-09-20T11:28:18.000000Z' }]
                                properties:
                                    packages: { type: array, example: [{ id: 1, title: 'Gye Nyame Package', plan_1_name: Single, image: 'https://onthego2africa.com/api/assets/images/gyenyame.jpg', plan_1_price: '$4,150.00 per person', plan_2_name: Twin, plan_2_price: '$3,685.00 per person', plan_3_name: null, plan_3_price: null, plan_4_name: null, plan_4_price: null, created_at: '2023-09-20T11:28:18.000000Z', updated_at: '2023-09-20T11:28:18.000000Z' }, { id: 2, title: 'Fawohodie Package', plan_1_name: Single, image: 'https://onthego2africa.com/api/assets/images/fawohodie.jpg', plan_1_price: '$3,790.00', plan_2_name: Twin, plan_2_price: '$3,443.00', plan_3_name: null, plan_3_price: null, plan_4_name: null, plan_4_price: null, created_at: '2023-09-20T11:28:18.000000Z', updated_at: '2023-09-20T11:28:18.000000Z' }, { id: 3, title: 'Sankofa Package', plan_1_name: 'Hotel - Single', image: 'https://onthego2africa.com/api/assets/images/sankofa.jpg', plan_1_price: '$3,400.00', plan_2_name: 'Hotel - Twin', plan_2_price: '$2,520.00', plan_3_name: 'Apartment (The Signature) - Single', plan_3_price: '$3,000.00', plan_4_name: 'Apartment (The Signature) - Twin', plan_4_price: '$2,200.00', created_at: '2023-09-20T11:28:18.000000Z', updated_at: '2023-09-20T11:28:18.000000Z' }], items: { type: object } }
            tags:
                - 'Event Package APIs'
            security: []
    '/api/packages/{id}':
        get:
            summary: 'GET /packages/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                    exception: Symfony\Component\HttpKernel\Exception\NotFoundHttpException
                                    file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Application.php'
                                    line: 1129
                                    trace: [{ file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\helpers.php', line: 44, function: abort, class: Illuminate\Foundation\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\app\Http\Controllers\PackageController.php', line: 56, function: abort }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Controller.php', line: 54, function: show, class: App\Http\Controllers\PackageController, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php', line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 262, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 205, function: runController, class: Illuminate\Routing\Route, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 721, function: run, class: Illuminate\Routing\Route, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php', line: 50, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 127, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 103, function: handleRequest, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 55, function: handleRequestUsingNamedLimiter, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\sanctum\src\Http\Middleware\EnsureFrontendRequestsAreStateful.php', line: 33, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Laravel\Sanctum\Http\Middleware\{closure}', class: Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\sanctum\src\Http\Middleware\EnsureFrontendRequestsAreStateful.php', line: 34, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 723, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 698, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 662, function: runRoute, class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 651, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 167, function: dispatch, class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php', line: 31, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php', line: 40, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TrimStrings, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ValidatePostSize.php', line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php', line: 86, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\fruitcake\laravel-cors\src\HandleCors.php', line: 52, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php', line: 39, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Http\Middleware\TrustProxies, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 142, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 111, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\Util.php', line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\Container.php', line: 653, function: call, class: Illuminate\Container\BoundMethod, type: '::' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 136, function: call, class: Illuminate\Container\Container, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\symfony\console\Command\Command.php', line: 298, function: execute, class: Illuminate\Console\Command, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\symfony\console\Application.php', line: 1040, function: run, class: Illuminate\Console\Command, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\symfony\console\Application.php', line: 301, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\symfony\console\Application.php', line: 171, function: doRun, class: Symfony\Component\Console\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Console\Application.php', line: 94, function: run, class: Symfony\Component\Console\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Console\Kernel.php', line: 129, function: run, class: Illuminate\Console\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\artisan', line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->' }]
                                properties:
                                    message: { type: string, example: 'Not Found' }
                                    exception: { type: string, example: Symfony\Component\HttpKernel\Exception\NotFoundHttpException }
                                    file: { type: string, example: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Application.php' }
                                    line: { type: integer, example: 1129 }
                                    trace: { type: array, example: [{ file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\helpers.php', line: 44, function: abort, class: Illuminate\Foundation\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\app\Http\Controllers\PackageController.php', line: 56, function: abort }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Controller.php', line: 54, function: show, class: App\Http\Controllers\PackageController, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php', line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 262, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 205, function: runController, class: Illuminate\Routing\Route, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 721, function: run, class: Illuminate\Routing\Route, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php', line: 50, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 127, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 103, function: handleRequest, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 55, function: handleRequestUsingNamedLimiter, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\sanctum\src\Http\Middleware\EnsureFrontendRequestsAreStateful.php', line: 33, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Laravel\Sanctum\Http\Middleware\{closure}', class: Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\sanctum\src\Http\Middleware\EnsureFrontendRequestsAreStateful.php', line: 34, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 723, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 698, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 662, function: runRoute, class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 651, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 167, function: dispatch, class: Illuminate\Routing\Router, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php', line: 31, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php', line: 40, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TrimStrings, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ValidatePostSize.php', line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php', line: 86, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\fruitcake\laravel-cors\src\HandleCors.php', line: 52, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php', line: 39, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Http\Middleware\TrustProxies, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 142, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 111, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\Util.php', line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Container\Container.php', line: 653, function: call, class: Illuminate\Container\BoundMethod, type: '::' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 136, function: call, class: Illuminate\Container\Container, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\symfony\console\Command\Command.php', line: 298, function: execute, class: Illuminate\Console\Command, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\symfony\console\Application.php', line: 1040, function: run, class: Illuminate\Console\Command, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\symfony\console\Application.php', line: 301, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\symfony\console\Application.php', line: 171, function: doRun, class: Symfony\Component\Console\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Console\Application.php', line: 94, function: run, class: Symfony\Component\Console\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\vendor\laravel\framework\src\Illuminate\Foundation\Console\Kernel.php', line: 129, function: run, class: Illuminate\Console\Application, type: '->' }, { file: 'C:\xampp\htdocs\onthego-api\artisan', line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->' }], items: { type: object } }
            tags:
                - 'Event Package APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: quidem
                required: true
                schema:
                    type: string
    /api/faqs:
        get:
            summary: 'GET /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    faqs: []
                                properties:
                                    faqs: { type: array, example: [] }
            tags:
                - 'FAQ APIs'
            security: []
        post:
            summary: 'POST /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: laborum
                                content:
                                    type: string
                                    description: ''
                                    example: voluptate
                            required:
                                - title
                                - content
            security: []
    '/api/faqs/{id}':
        get:
            summary: 'GET /faqs/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'FAQ APIs'
            security: []
        put:
            summary: 'PUT /faqs/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: eligendi
                                content:
                                    type: string
                                    description: ''
                                    example: est
                            required:
                                - title
                                - content
            security: []
        delete:
            summary: 'DELETE /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: in
                required: true
                schema:
                    type: string
    /api/newsletter-subscriptions:
        get:
            summary: 'GET /newsletter'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    newsletters: []
                                properties:
                                    newsletters: { type: array, example: [] }
            tags:
                - 'NewsLetter APIs'
            security: []
    /api/newsletter-subscribe:
        post:
            summary: 'POST /newsletter-subscribe'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'NewsLetter APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: exercitationem
                            required:
                                - email
            security: []
    /api/tours:
        get:
            summary: 'GET /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    tours: []
                                properties:
                                    tours: { type: array, example: [] }
            tags:
                - 'Tour APIs'
            security: []
        post:
            summary: 'POST /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: voluptas
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: deserunt
                                itenary:
                                    type: string
                                    description: ''
                                    example: explicabo
                                cost:
                                    type: string
                                    description: ''
                                    example: doloribus
                                'images[]':
                                    type: array
                                    description: ''
                                    example: ex
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
    '/api/tours/{slug}':
        get:
            summary: 'GET /tours/slug'
            description: 'Fetch tour with slug'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    tour: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] }
                                properties:
                                    tour: { type: object, example: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] } }
            tags:
                - 'Tour APIs'
            security: []
        parameters:
            -
                in: path
                name: slug
                description: ''
                example: quas
                required: true
                schema:
                    type: string
    '/api/tours/{id}':
        put:
            summary: 'PUT /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: nobis
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: nisi
                                itenary:
                                    type: string
                                    description: ''
                                    example: accusantium
                                cost:
                                    type: string
                                    description: ''
                                    example: voluptatem
                                'images[]':
                                    type: array
                                    description: ''
                                    example: reiciendis
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
        delete:
            summary: 'DELETE /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: voluptatem
                required: true
                schema:
                    type: string
    /api/register:
        post:
            summary: 'POST /register'
            description: 'Store a newly created user in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Dr. Larue Pouros', username: quentin.hand, email: schaefer.florencio@example.net, email_verified_at: '2023-10-04T10:11:44.000000Z', updated_at: '2023-10-04T10:11:44.000000Z', created_at: '2023-10-04T10:11:44.000000Z', id: 7 }
                                properties:
                                    data: { type: object, example: { name: 'Dr. Larue Pouros', username: quentin.hand, email: schaefer.florencio@example.net, email_verified_at: '2023-10-04T10:11:44.000000Z', updated_at: '2023-10-04T10:11:44.000000Z', created_at: '2023-10-04T10:11:44.000000Z', id: 7 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: cumque
                                username:
                                    type: string
                                    description: ''
                                    example: cum
                                email:
                                    type: string
                                    description: ''
                                    example: et
                                password:
                                    type: string
                                    description: ''
                                    example: voluptatum
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: dolor
                            required:
                                - name
                                - username
                                - email
                                - password
                                - password_confirmation
            security: []
    /api/forgot-password:
        post:
            summary: 'POST /forgot-password'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: aut
                            required:
                                - email
            security: []
    /api/login:
        post:
            summary: 'POST /login'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Jaren Brakus DVM', username: windler.davon, email: karl.altenwerth@example.net, email_verified_at: '2023-10-04T10:11:44.000000Z', updated_at: '2023-10-04T10:11:44.000000Z', created_at: '2023-10-04T10:11:44.000000Z', id: 8 }
                                properties:
                                    data: { type: object, example: { name: 'Jaren Brakus DVM', username: windler.davon, email: karl.altenwerth@example.net, email_verified_at: '2023-10-04T10:11:44.000000Z', updated_at: '2023-10-04T10:11:44.000000Z', created_at: '2023-10-04T10:11:44.000000Z', id: 8 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: quis
                                password:
                                    type: string
                                    description: ''
                                    example: incidunt
                            required:
                                - email
                                - password
            security: []
    /api/email/verification-notification:
        post:
            summary: 'Send Verify Email Link'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: voluptate
                            required:
                                - email
            security: []
    '/api/verify-email/{id}/{hash}':
        get:
            summary: 'Verify Email - Backend Only'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    returns: 'success page'
                                properties:
                                    returns: { type: string, example: 'success page' }
            tags:
                - 'User APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: consectetur
                required: true
                schema:
                    type: string
            -
                in: path
                name: hash
                description: ''
                example: perspiciatis
                required: true
                schema:
                    type: string
    /api/profile:
        get:
            summary: 'GET /profile'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'User APIs'
            security: []
    '/api/users/{id}':
        delete:
            summary: 'DELETE /users'
            description: 'Remove the specified resource from storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: illo
                required: true
                schema:
                    type: string
    /api/logout:
        post:
            summary: 'POST /logout'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            security: []
