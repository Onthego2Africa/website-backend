openapi: 3.0.3
info:
    title: OnTheGo2Africa
    description: ''
    version: 1.0.0
servers:
    -
        url: 'https://onthego-api.ratecardly.com'
paths:
    /api/users:
        get:
            summary: 'GET /users'
            description: 'Get a list of all users'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ name: 'Dr. Dawn Swaniawski I', username: antwon55, email: carolyn31@example.net, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 63 }, { name: 'Theodore Lehner', username: bechtelar.adrienne, email: fjones@example.net, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 64 }]
                                properties:
                                    data: { type: array, example: [{ name: 'Dr. Dawn Swaniawski I', username: antwon55, email: carolyn31@example.net, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 63 }, { name: 'Theodore Lehner', username: bechtelar.adrienne, email: fjones@example.net, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 64 }], items: { type: object } }
            tags:
                - 'Admin APIs'
            security: []
        put:
            summary: 'PUT /users'
            description: 'Update the user in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Krystina Crona', username: janiya.lesch, email: ulind@example.net, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 62 }
                                properties:
                                    data: { type: object, example: { name: 'Krystina Crona', username: janiya.lesch, email: ulind@example.net, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 62 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: voluptatibus
                                username:
                                    type: string
                                    description: ''
                                    example: fugit
                            required:
                                - name
                                - username
            security: []
    /api/admins:
        get:
            summary: 'GET /admins'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Admin APIs'
            security: []
        post:
            summary: 'POST /admins'
            description: 'Store a newly created admin in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: eaque
                                username:
                                    type: string
                                    description: ''
                                    example: molestiae
                                email:
                                    type: string
                                    description: ''
                                    example: non
                                password:
                                    type: string
                                    description: ''
                                    example: non
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: eos
                            required:
                                - name
                                - username
                                - email
                                - password
                                - password_confirmation
            security: []
        put:
            summary: 'PUT /admins'
            description: 'Update the admin in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: autem
                                username:
                                    type: string
                                    description: ''
                                    example: id
                            required:
                                - name
                                - username
            security: []
        delete:
            summary: 'DELETE /admins'
            description: 'Remove the Admin from storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin APIs'
            security: []
    '/api/admins/{id}':
        get:
            summary: 'GET /admin/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Admin APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: aspernatur
                required: true
                schema:
                    type: string
    /api/reservations:
        get:
            summary: 'GET /reservations'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Booking APIs'
            security: []
    '/api/book-tour/{id}':
        post:
            summary: 'POST /book-tour'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                number_of_guests:
                                    type: string
                                    description: ''
                                    example: doloremque
                                check_in:
                                    type: string
                                    description: ''
                                    example: saepe
                                check_out:
                                    type: string
                                    description: ''
                                    example: et
                                cost:
                                    type: string
                                    description: ''
                                    example: in
                                paymentID:
                                    type: string
                                    description: ''
                                    example: numquam
                            required:
                                - number_of_guests
                                - check_in
                                - check_out
                                - cost
                                - paymentID
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: ut
                required: true
                schema:
                    type: string
    '/api/book-event/{id}':
        post:
            summary: 'POST /book-event'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                number_of_guests:
                                    type: string
                                    description: ''
                                    example: qui
                                check_in:
                                    type: string
                                    description: ''
                                    example: quod
                                check_out:
                                    type: string
                                    description: ''
                                    example: consequatur
                                cost:
                                    type: string
                                    description: ''
                                    example: rerum
                                paymentID:
                                    type: string
                                    description: ''
                                    example: sunt
                            required:
                                - number_of_guests
                                - check_in
                                - check_out
                                - cost
                                - paymentID
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: consequatur
                required: true
                schema:
                    type: string
    '/api/reservations/{id}':
        get:
            summary: 'GET /reservations/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Booking APIs'
            security: []
        put:
            summary: 'PUT /reservations/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            security: []
        delete:
            summary: 'DELETE /reservations'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Booking APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: quam
                required: true
                schema:
                    type: string
    /sanctum/csrf-cookie:
        get:
            summary: 'Return an empty response simply to trigger the storage of the CSRF cookie in the browser.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /:
        get:
            summary: Stale
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    returns: 'success page'
                                properties:
                                    returns: { type: string, example: 'success page' }
            tags:
                - Endpoints
            security: []
    /api/events:
        get:
            summary: 'GET /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    events: []
                                properties:
                                    events: { type: array, example: [] }
            tags:
                - 'Event APIs'
            security: []
        post:
            summary: 'POST /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: architecto
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: minus
                                itenary:
                                    type: string
                                    description: ''
                                    example: nam
                                cost:
                                    type: string
                                    description: ''
                                    example: quasi
                                'images[]':
                                    type: array
                                    description: ''
                                    example: corporis
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
    '/api/events/{slug}':
        get:
            summary: 'GET /events/slug'
            description: 'Fetch event with slug'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    event: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] }
                                properties:
                                    event: { type: object, example: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] } }
            tags:
                - 'Event APIs'
            security: []
        parameters:
            -
                in: path
                name: slug
                description: ''
                example: itaque
                required: true
                schema:
                    type: string
    '/api/events/{id}':
        put:
            summary: 'PUT /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: nesciunt
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: asperiores
                                itenary:
                                    type: string
                                    description: ''
                                    example: harum
                                cost:
                                    type: string
                                    description: ''
                                    example: qui
                                'images[]':
                                    type: array
                                    description: ''
                                    example: repellendus
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
        delete:
            summary: 'DELETE /events'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Event APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: aut
                required: true
                schema:
                    type: string
    /api/faqs:
        get:
            summary: 'GET /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    faqs: []
                                properties:
                                    faqs: { type: array, example: [] }
            tags:
                - 'FAQ APIs'
            security: []
        post:
            summary: 'POST /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: maiores
                                content:
                                    type: string
                                    description: ''
                                    example: officia
                            required:
                                - title
                                - content
            security: []
    '/api/faqs/{id}':
        get:
            summary: 'GET /faqs/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'FAQ APIs'
            security: []
        put:
            summary: 'PUT /faqs/id'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: reprehenderit
                                content:
                                    type: string
                                    description: ''
                                    example: totam
                            required:
                                - title
                                - content
            security: []
        delete:
            summary: 'DELETE /faqs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'FAQ APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: alias
                required: true
                schema:
                    type: string
    /api/newsletter-subscriptions:
        get:
            summary: 'GET /newsletter'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    newsletters: []
                                properties:
                                    newsletters: { type: array, example: [] }
            tags:
                - 'NewsLetter APIs'
            security: []
    /api/newsletter-subscribe:
        post:
            summary: 'POST /newsletter-subscribe'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'NewsLetter APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: accusantium
                            required:
                                - email
            security: []
    /api/tours:
        get:
            summary: 'GET /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    tours: []
                                properties:
                                    tours: { type: array, example: [] }
            tags:
                - 'Tour APIs'
            security: []
        post:
            summary: 'POST /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: voluptatibus
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: est
                                itenary:
                                    type: string
                                    description: ''
                                    example: debitis
                                cost:
                                    type: string
                                    description: ''
                                    example: dicta
                                'images[]':
                                    type: array
                                    description: ''
                                    example: nihil
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
    '/api/tours/{slug}':
        get:
            summary: 'GET /tours/slug'
            description: 'Fetch tour with slug'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    tour: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] }
                                properties:
                                    tour: { type: object, example: { id: 1, title: dgs, slug: dgs, cover_image: 'http://127.0.0.1:8000/storage/cover_images/lheicfYAjrZTfqlbDutpqUIpS9ueefojUyYDsDYx.jpg', overview: skflalkjflfkj, itenary: dsfsf, cost: dsf, created_at: '2023-08-16T14:11:19.000000Z', updated_at: '2023-08-16T14:11:19.000000Z', images: [] } }
            tags:
                - 'Tour APIs'
            security: []
        parameters:
            -
                in: path
                name: slug
                description: ''
                example: consequatur
                required: true
                schema:
                    type: string
    '/api/tours/{id}':
        put:
            summary: 'PUT /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: voluptates
                                cover_image:
                                    type: string
                                    format: binary
                                    description: ''
                                overview:
                                    type: string
                                    description: ''
                                    example: aut
                                itenary:
                                    type: string
                                    description: ''
                                    example: et
                                cost:
                                    type: string
                                    description: ''
                                    example: sed
                                'images[]':
                                    type: array
                                    description: ''
                                    example: aperiam
                            required:
                                - title
                                - cover_image
                                - overview
                                - itenary
                                - cost
                                - 'images[]'
            security: []
        delete:
            summary: 'DELETE /tours'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tour APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: qui
                required: true
                schema:
                    type: string
    /api/register:
        post:
            summary: 'POST /register'
            description: 'Store a newly created user in storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Cortez Adams', username: gusikowski.julianne, email: america92@example.com, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 60 }
                                properties:
                                    data: { type: object, example: { name: 'Cortez Adams', username: gusikowski.julianne, email: america92@example.com, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 60 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: nemo
                                username:
                                    type: string
                                    description: ''
                                    example: reprehenderit
                                email:
                                    type: string
                                    description: ''
                                    example: fugiat
                                password:
                                    type: string
                                    description: ''
                                    example: dolorum
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: dolorem
                            required:
                                - name
                                - username
                                - email
                                - password
                                - password_confirmation
            security: []
    /api/forgot-password:
        post:
            summary: 'POST /forgot-password'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: minus
                            required:
                                - email
            security: []
    /api/login:
        post:
            summary: 'POST /login'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: 'Prof. Anne Kessler', username: casper.arnaldo, email: hermann.clay@example.net, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 61 }
                                properties:
                                    data: { type: object, example: { name: 'Prof. Anne Kessler', username: casper.arnaldo, email: hermann.clay@example.net, email_verified_at: '2023-08-30T13:59:18.000000Z', updated_at: '2023-08-30T13:59:18.000000Z', created_at: '2023-08-30T13:59:18.000000Z', id: 61 } }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: at
                                password:
                                    type: string
                                    description: ''
                                    example: illo
                            required:
                                - email
                                - password
            security: []
    /api/email/verification-notification:
        post:
            summary: 'Send Verify Email Link'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: ''
                                    example: enim
                            required:
                                - email
            security: []
    '/api/verify-email/{id}/{hash}':
        get:
            summary: 'Verify Email - Backend Only'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    returns: 'success page'
                                properties:
                                    returns: { type: string, example: 'success page' }
            tags:
                - 'User APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: ut
                required: true
                schema:
                    type: string
            -
                in: path
                name: hash
                description: ''
                example: atque
                required: true
                schema:
                    type: string
    /api/profile:
        get:
            summary: 'GET /profile'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'User APIs'
            security: []
    '/api/users/{id}':
        delete:
            summary: 'DELETE /users'
            description: 'Remove the specified resource from storage.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: cupiditate
                required: true
                schema:
                    type: string
    /api/logout:
        post:
            summary: 'POST /logout'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User APIs'
            security: []
